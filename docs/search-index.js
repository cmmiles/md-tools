var searchIndex = JSON.parse('{\
"md_tools":{"doc":"<code>md-tools</code>","t":"AAAAFAAFFFFFNDNNNENNNNENLLLLLLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLDIDDLFLLLLLLLLLLLLKLLFLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLMMMFFFFDDDMMLLLLLLMLLLLLLLMLLLLLLLLLLLLLLMMLLLMMLMLMMLMLLLLLMLLLLLLLLLLLLF","n":["analysis","config","math","output","run","structure","utils","get_n_hbonds","local_steinhardt","local_steinhardt_2","steinhardt","water_dipole","Cluster","Config","Convert","Dipole","NumFrames","OrderParameter","Q3","Q4","Q6","Steinhardt","Task","Theta","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","eq","fmt","fmt","fmt","from","from","from","into","into","into","maxt","mint","n_cls","op_list","outfile","pbc","sfile","stride","task","tfile","title_line","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AdjacencyMatrix","Coords","Point","Vector","add","angle_between_vectors","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_from_coords","centre","check_adjacency","clone","clone_into","cluster","coords","coords","div","dot_product","dsq","dsq","eq","ex","ey","ez","fmt","fmt","fmt","from","from","from","into","into","into","mul","new","phi","radius","rsq","spherical_harmonic","sub","theta","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vector_to_coord","vector_to_coord","x","y","z","csv","q6_clustering","steinhardt","water_dipole","Atom","Molecule","Universe","atoms","atoms","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","box_dimensions","clone","clone_into","convert","coord_shell","coord_shell","coords","coords","coords","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from_gro","from_pdb","get_molecules","get_nframes","id","id","into","into","into","name","name","new","pbc","q6_clustering","resid","resname","steinhardt","time","to_gro","to_owned","to_pdb","to_string","to_string","traj","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","water_dipole","write_gro","write_pdb","justify_atom_name"],"q":[[0,"md_tools"],[7,"md_tools::analysis"],[12,"md_tools::config"],[61,"md_tools::math"],[123,"md_tools::output"],[127,"md_tools::structure"],[193,"md_tools::utils"]],"d":["Module for analysis functions.","Module for parsing input arguments.","Module to contain mathematical functions and structures.","Module to handle outputting analysis results to files.","Main function for running md-tools.","Module containing tangible structural objects.","Module to contain small utility functions.","Computes the number of hydrogen bonds for a list of water …","Calculates local version of Steinhardt Q6 parameter, as …","Calculates local version of Steinhardt Q6 parameter, as …","Calculates the Steinhardt bond order parameters for a …","Calculates the water dipoles for a given universe at its …","","Holds config setup for the CLI app.","","","","Available order parameters.","","","","","Type of analysis to be run.","","","","","","","","Build the <code>Config</code> from command line arguments.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","End time for analysis (+∞)","Start time for analysis (0)","Number of clusters to output for <code>md-tools cluster</code> (1)","Order parameters to calculate for <code>md-tools steinhardt</code>","Output file","Whether to use periodic boundary conditions (yes)","Structure file","Time step for analysis (1)","Analysis procedure","Trajectory file","Title line for output files. E.g.","","","","","","","","","","Adjacency matrix structure for clustering analysis.","An object which has coordinates, e.g. Atom, centre of mass.","Generic Point struct for positional data alone, e.g. …","Three-dimensional (mathematical) vector. Stored in …","","Calculates the angle between two <code>Vector</code>s in radians. Use …","","","","","","","Build an adjacency matrix from a set of objects which …","Finds the centre of a set of coordinates <em>not taking mass </em>…","Given two indices, check if the corresponding objects are …","","","Group objects into clusters using depth first search (DFS).","Gives the coordinates of the object.","","","Calculates the dot product of two <code>Vector</code>s.","Calculates the squared distance to another Coords.","Calculates the squared distance to another Coords.","","Constructor for x-axis basis <code>Vector</code> (1, 0, 0).","Constructor for y-axis basis <code>Vector</code> (0, 1, 0).","Constructor for z-axis basis <code>Vector</code> (0, 0, 1).","Pretty matrix representations.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructor function for <code>Vector</code>, accepting cartesian …","Returns the azimuthal spherical coordinate φ ∈ (-π, π]…","Calculates the size (radius) of the <code>Vector</code>.","Calculates the square of the size (radius) of the <code>Vector</code>.","Computes the spherical harmonic Y_l^m for a given <code>Vector</code>. …","","Returns the polar spherical coordinate θ ∈ [0, π], …","","","","","","","","","","","","","Calculates the vector to another Coords.","Calculates the vector to another Coords.","x-component of the <code>Vector</code>","y-component of the <code>Vector</code>","z-component of the <code>Vector</code>","Writes output to CSV file.","Writes q6 clustering output to file.","Writes Steinhardt parameter output to file. N.B. to be …","Writes water dipole output to file. N.B. to be combined …","Contains data for a single atom.","Contains references to atoms for a single molcule, along …","Contains the data for the whole system. This is intended …","Atoms within molecule","Contains the Atoms for the whole system","","","","","","","Dimensions of the simulation box as a 3D array","","","Convert the Universe to the desired format.","Calculates the coordination shell of the Atom","Calculates the coordination shell of the Molecule, using …","","","Cartesian position (nm)","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an Atom from a line of a GRO file.","Create an Atom from a line of a PDB file.","Return a vector of molecules, assumes molecules are …","Return the number of frames in the trajectory.","Atom index","Molecule index","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Atom name, e.g. OW","Molecule name","Constructor method for Universe, reads a structure file …","Whether to use periodic boundary conditions (default: true)","Largest icy cluster analysis protocol (work in progress, …","Residue index","Residue name, e.g. SOL","Calculate Steinhardt order parameters for the frames …","Current time","Write a line for the Atom in GRO format.","","Write a line for the Atom in PDB format.","","","Location of the trajectory file (optional)","","","","","","","","","","Calculate the water dipoles for the frames specified in …","Write the current frame to a GRO file.","Write the current frame to a PDB file.","Justify atom name by PDB conventions. Where possible, the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,17,0,17,17,17,0,13,13,13,17,0,13,1,17,13,1,17,13,1,13,1,17,13,1,17,13,1,17,13,1,1,1,1,1,1,1,1,1,1,13,1,17,13,1,17,13,1,17,13,0,0,0,0,11,0,21,20,11,21,20,11,20,21,20,11,11,20,19,21,11,0,19,19,11,11,11,11,20,11,11,21,20,11,21,20,11,11,11,11,11,11,0,11,11,11,20,11,21,20,11,21,20,11,21,20,11,19,19,11,11,11,0,0,0,0,0,0,0,4,29,32,4,29,32,4,29,29,4,4,29,32,4,32,4,32,32,4,32,32,4,29,29,32,4,29,32,32,29,29,32,4,32,4,29,32,4,29,29,29,32,32,29,29,32,4,32,32,29,29,32,4,29,32,4,29,32,4,29,29,29,29,0],"f":[0,0,0,0,[1,[[3,[2]]]],0,0,[[[5,[4]],6,6,7],[[5,[8]]]],[[9,6,[5,[4]],7,[7,[[5,[10]]]]]],[[9,6,[5,[4]],7,[7,[[5,[10]]]]]],[[9,6,[5,[4]],7,[7,[[5,[10]]]]]],[[[5,[4]],11,7],[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[12,[[3,[1,2]]]],[[13,13],14],[[1,15],16],[[17,15],16],[[13,15],16],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[13,2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],0,0,0,0,[[11,11],11],[[11,11],6],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[19]],6,7],20],[[[5,[19]],7],21],[[20,10,10],[[3,[14,2]]]],[11,11],[[]],[20,[[5,[[5,[10]]]]]],[[]],[21],[[11,6],11],[[11,11],6],[[19,7],6],[[19,7],6],[[11,11],14],[[],11],[[],11],[[],11],[[20,15],16],[[11,15],16],[[11,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[11,6],11],[[6,6,6],11],[11,6],[11,6],[11,6],[[9,9,11],[[3,[[22,[6]],2]]]],[[11,11],11],[11,6],[[]],[[],23],[[],23],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[19,7],11],[[19,7],11],0,0,0,[[[5,[24]],[5,[6]],[5,[24]],25],[[3,[2]]]],[[[5,[[5,[24]]]],26,25],[[3,[2]]]],[[[5,[24]],[5,[6]],26,25],[[3,[2]]]],[[[5,[24]],[5,[6]],26,[28,[[27,[25]]]]],[[3,[2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[4,4],[[]],[[29,24,24,24,[7,[30]]],[[31,[2]]]],[[32,29,6,2,7],[[5,[32]]]],[[4,[5,[4]],6,7],[[5,[4]]]],[32],[4],0,[[32,32],14],[[4,4],14],[[32,15],16],[[32,15],16],[[4,15],16],[[29,15],16],[[29,15],16],[[]],[[]],[[]],[2,[[31,[32,2]]]],[2,[[31,[32,2]]]],[29,[[5,[4]]]],[29,[[31,[10,2]]]],0,0,[[]],[[]],[[]],0,0,[[[7,[30]],[7,[30]],14],29],0,[[29,2,6,24,24,24,10,[7,[30]]],[[31,[2]]]],0,0,[[29,2,[5,[13]],6,24,24,24,[7,[30]]],[[31,[2]]]],0,[32,23],[[]],[32,23],[[],23],[[],23],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[29,2,11,24,24,24,[7,[30]]],[[31,[2]]]],[[29,2]],[[29,2]],[2,23]],"c":[],"p":[[3,"Config"],[15,"str"],[4,"Result"],[3,"Molecule"],[3,"Vec"],[15,"f64"],[4,"Option"],[15,"u8"],[15,"i8"],[15,"usize"],[3,"Vector"],[8,"Iterator"],[4,"OrderParameter"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Task"],[3,"TypeId"],[8,"Coords"],[3,"AdjacencyMatrix"],[3,"Point"],[3,"Complex"],[3,"String"],[15,"u32"],[3,"File"],[15,"f32"],[3,"Mutex"],[3,"Arc"],[3,"Universe"],[3,"PathBuf"],[6,"Result"],[3,"Atom"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
